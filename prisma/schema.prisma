generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["tracing"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                     String                  @id @default(cuid())
  name                   String?
  email                  String?                 @unique
  emailVerified          DateTime?
  image                  String?
  password               String?
  role                   UserRole                @default(USER)
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  bio                    String?
  followers              Int                     @default(0)
  following              Int                     @default(0)
  joinDate               DateTime                @default(now())
  location               String?
  username               String?                 @unique
  accounts               Account[]
  chatMessages           ChatMessage[]
  club                   Club?
  comments               Comment[]
  dj                     Dj?
  djRatings              DjRating[]
  djFollowing            FanFollowing[]          @relation("UserFanFollowings")
  followingUsers         Follow[]                @relation("UserFollowing")
  followedByUsers        Follow[]                @relation("UserFollowers")
  messageReactions       MessageReaction[]
  moments                Moment[]
  likedMoments           MomentLike[]
  Notification           Notification[]
  NotificationPreference NotificationPreference?
  PushSubscription       PushSubscription[]
  sessions               Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Dj {
  id           String                 @id @default(cuid())
  userId       String                 @unique
  genres       String[]
  rating       Float                  @default(0)
  fans         Int                    @default(0)
  bio          String?
  currentClub  String?
  status       DJStatus               @default(OFFLINE)
  instagram    String?
  twitter      String?
  facebook     String?
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt
  user         User                   @relation(fields: [userId], references: [id])
  affiliations DjClubAffiliation[]
  history      DjPerformanceHistory[]
  ratings      DjRating[]
  schedule     DjSchedule[]
  events       Event[]
  fanFollowers FanFollowing[]         @relation("DJFanFollowers")
}

model DjSchedule {
  id            String   @id @default(cuid())
  djId          String
  clubId        String
  startTime     DateTime
  endTime       DateTime
  eventName     String?
  isRecurring   Boolean  @default(false)
  recurringDays String[] @default([])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  club          Club     @relation(fields: [clubId], references: [id])
  dj            Dj       @relation(fields: [djId], references: [id])
}

model DjPerformanceHistory {
  id         String   @id @default(cuid())
  djId       String
  clubId     String
  startTime  DateTime
  endTime    DateTime
  eventName  String?
  rating     Float?
  attendance Int?
  notes      String?
  createdAt  DateTime @default(now())
  club       Club     @relation(fields: [clubId], references: [id])
  dj         Dj       @relation(fields: [djId], references: [id])
}

model DjClubAffiliation {
  id        String          @id @default(cuid())
  djId      String
  clubId    String
  type      AffiliationType
  startDate DateTime
  endDate   DateTime?
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  club      Club            @relation(fields: [clubId], references: [id])
  dj        Dj              @relation(fields: [djId], references: [id])
}

model Club {
  id             String                 @id @default(cuid())
  userId         String                 @unique
  name           String
  location       String
  address        String
  description    String?
  rating         Float                  @default(0)
  capacity       Int
  dresscode      String?
  amenities      String[]               @default([])
  phone          String?
  website        String?
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt
  image          String?
  isActive       Boolean                @default(true)
  openingHours   Json?
  user           User                   @relation(fields: [userId], references: [id])
  djAffiliations DjClubAffiliation[]
  djHistory      DjPerformanceHistory[]
  djSchedules    DjSchedule[]
  events         Event[]
}

model Event {
  id        String   @id @default(cuid())
  name      String
  date      DateTime
  clubId    String
  djId      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  club      Club     @relation(fields: [clubId], references: [id])
  dj        Dj       @relation(fields: [djId], references: [id])
}

model Moment {
  id        String       @id @default(cuid())
  title     String
  image     String
  location  String?
  type      String       @default("image")
  userId    String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  caption   String?
  comments  Comment[]
  user      User         @relation(fields: [userId], references: [id])
  likes     MomentLike[]
}

model MomentLike {
  id        String   @id @default(cuid())
  momentId  String
  userId    String
  createdAt DateTime @default(now())
  moment    Moment   @relation(fields: [momentId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([momentId, userId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  momentId  String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  moment    Moment   @relation(fields: [momentId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  follower    User     @relation("UserFollowing", fields: [followerId], references: [id])
  following   User     @relation("UserFollowers", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
}

model DjRating {
  id        String   @id @default(cuid())
  userId    String
  djId      String
  rating    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  dj        Dj       @relation(fields: [djId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, djId])
}

model FanFollowing {
  id        String   @id @default(cuid())
  userId    String
  djId      String
  createdAt DateTime @default(now())
  dj        Dj       @relation("DJFanFollowers", fields: [djId], references: [id], onDelete: Cascade)
  user      User     @relation("UserFanFollowings", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, djId])
}

model ChatRoom {
  id        String        @id @default(cuid())
  name      String?
  type      RoomType      @default(PUBLIC)
  djId      String?
  clubId    String?
  isActive  Boolean       @default(true)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  messages  ChatMessage[]

  @@index([djId])
  @@index([clubId])
}

model ChatMessage {
  id          String            @id @default(cuid())
  roomId      String
  senderId    String
  message     String
  messageType MessageType       @default(TEXT)
  format      Json?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  room        ChatRoom          @relation(fields: [roomId], references: [id], onDelete: Cascade)
  sender      User              @relation(fields: [senderId], references: [id])
  reactions   MessageReaction[]

  @@index([roomId, createdAt])
  @@index([senderId])
}

model MessageReaction {
  id        String      @id @default(cuid())
  messageId String
  userId    String
  emoji     String
  createdAt DateTime    @default(now())
  message   ChatMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user      User        @relation(fields: [userId], references: [id])

  @@unique([messageId, userId, emoji])
  @@index([messageId])
}

model Notification {
  id        String           @id
  userId    String
  type      NotificationType
  title     String
  message   String
  data      Json?
  isRead    Boolean          @default(false)
  actionUrl String?
  createdAt DateTime         @default(now())
  updatedAt DateTime
  User      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([createdAt])
  @@index([userId, isRead])
}

model NotificationPreference {
  id                       String   @id
  userId                   String   @unique
  emailNotifications       Boolean  @default(true)
  pushNotifications        Boolean  @default(true)
  djLiveNotifications      Boolean  @default(true)
  newFollowerNotifications Boolean  @default(true)
  eventReminders           Boolean  @default(true)
  chatMentions             Boolean  @default(true)
  momentLikes              Boolean  @default(true)
  systemUpdates            Boolean  @default(true)
  createdAt                DateTime @default(now())
  updatedAt                DateTime
  User                     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PushSubscription {
  id        String   @id
  userId    String
  endpoint  String
  p256dh    String
  auth      String
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, endpoint])
  @@index([userId])
}

enum DJStatus {
  OFFLINE
  PERFORMING
  SCHEDULED
  ON_BREAK
}

enum AffiliationType {
  RESIDENT
  GUEST
  FEATURED
}

enum UserRole {
  USER
  DJ
  CLUB_OWNER
  ADMIN
}

enum RoomType {
  PUBLIC
  DJ_FAN
  CLUB
  PRIVATE
}

enum MessageType {
  TEXT
  SYSTEM
  EMOJI
}

enum NotificationType {
  DJ_LIVE
  NEW_FOLLOWER
  EVENT_REMINDER
  CHAT_MENTION
  MOMENT_LIKE
  MOMENT_COMMENT
  SYSTEM_UPDATE
  DJ_RATING
  EVENT_CREATED
  CLUB_UPDATE
}
