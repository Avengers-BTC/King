generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String       @id @default(cuid())
  name            String?
  email           String?      @unique
  emailVerified   DateTime?
  image           String?
  password        String?
  role            UserRole     @default(USER)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  bio             String?
  followers       Int          @default(0)
  following       Int          @default(0)
  joinDate        DateTime     @default(now())
  location        String?
  username        String?      @unique
  accounts        Account[]
  club            Club?
  comments        Comment[]
  dj              DJ?
  followingUsers  Follow[]     @relation("UserFollowing")
  followedByUsers Follow[]     @relation("UserFollowers")
  moments         Moment[]
  likedMoments    MomentLike[]
  sessions        Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model DJ {
  id          String   @id @default(cuid())
  userId      String   @unique
  genres      String[]
  rating      Float    @default(0)
  fans        Int      @default(0)
  bio         String?
  currentClub String?
  status      DJStatus @default(OFFLINE)
  instagram   String?
  twitter     String?
  facebook    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  events      Event[]
  schedule    DJSchedule[]
  history     DJPerformanceHistory[]
  affiliations DJClubAffiliation[]
}

enum DJStatus {
  OFFLINE
  PERFORMING
  SCHEDULED
  ON_BREAK
}

model DJSchedule {
  id          String    @id @default(cuid())
  djId        String
  clubId      String
  startTime   DateTime
  endTime     DateTime
  eventName   String?
  isRecurring Boolean   @default(false)
  recurringDays String[] @default([])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  dj          DJ        @relation(fields: [djId], references: [id])
  club        Club      @relation(fields: [clubId], references: [id])
}

model DJPerformanceHistory {
  id          String    @id @default(cuid())
  djId        String
  clubId      String
  startTime   DateTime
  endTime     DateTime
  eventName   String?
  rating      Float?
  attendance  Int?
  notes       String?
  createdAt   DateTime  @default(now())
  dj          DJ        @relation(fields: [djId], references: [id])
  club        Club      @relation(fields: [clubId], references: [id])
}

model DJClubAffiliation {
  id          String       @id @default(cuid())
  djId        String
  clubId      String
  type        AffiliationType
  startDate   DateTime
  endDate     DateTime?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  dj          DJ          @relation(fields: [djId], references: [id])
  club        Club        @relation(fields: [clubId], references: [id])
}

enum AffiliationType {
  RESIDENT
  GUEST
  FEATURED
}

model Club {
  id          String   @id @default(cuid())
  userId      String   @unique
  name        String
  location    String
  address     String
  description String?
  rating      Float    @default(0)
  capacity    Int
  dresscode   String?
  amenities   String[] @default([])
  phone       String?
  website     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  image       String?
  isActive    Boolean  @default(true)
  openingHours Json?
  user        User     @relation(fields: [userId], references: [id])
  events      Event[]
  djSchedules DJSchedule[]
  djHistory   DJPerformanceHistory[]
  djAffiliations DJClubAffiliation[]
}

model Event {
  id        String   @id @default(cuid())
  name      String
  date      DateTime
  clubId    String
  djId      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  club      Club     @relation(fields: [clubId], references: [id])
  dj        DJ       @relation(fields: [djId], references: [id])
}

model Moment {
  id        String       @id @default(cuid())
  title     String
  image     String
  location  String?
  type      String       @default("image")
  userId    String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  comments  Comment[]
  user      User         @relation(fields: [userId], references: [id])
  likes     MomentLike[]
}

model MomentLike {
  id        String   @id @default(cuid())
  momentId  String
  userId    String
  createdAt DateTime @default(now())
  moment    Moment   @relation(fields: [momentId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([momentId, userId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  momentId  String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  moment    Moment   @relation(fields: [momentId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  follower    User     @relation("UserFollowing", fields: [followerId], references: [id])
  following   User     @relation("UserFollowers", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
}

enum UserRole {
  USER
  DJ
  CLUB_OWNER
  ADMIN
}
