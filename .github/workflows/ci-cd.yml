name: NightVibe CI/CD

on:
  push:
    branches: [master, main]
  pull_request:
    branches: [master, main]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    # Define environment variables needed for the build
    env:
      # Use default values for CI testing - these won't be used in production
      DATABASE_URL: 'postgresql://postgres:postgres@localhost:5432/test_db'
      NEXTAUTH_SECRET: 'build-only-secret-key-not-for-production-use'
      NEXTAUTH_URL: 'http://localhost:3000'
      NEXT_PUBLIC_SITE_URL: 'http://localhost:3000'

    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
    
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
        
      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma Client
        run: npx prisma generate

      - name: Lint code
        run: npm run lint

      - name: Run tests
        run: npm test
        env:
          DATABASE_URL: 'postgresql://postgres:postgres@localhost:5432/test_db'
          NEXTAUTH_SECRET: 'test-secret-key'
          NEXTAUTH_URL: 'http://localhost:3000'
          NEXT_PUBLIC_SITE_URL: 'http://localhost:3000'

      - name: Build application
        run: npm run build
        env:
          SKIP_ENV_VALIDATION: true
          DATABASE_URL: 'postgresql://postgres:postgres@localhost:5432/test_db'
          NEXTAUTH_SECRET: 'test-secret-key'
          NEXTAUTH_URL: 'http://localhost:3000'
          NEXT_PUBLIC_SITE_URL: 'http://localhost:3000'

  deploy:
    needs: build-and-test
    if: (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main') && github.event_name == 'push'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
    
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
        
      - name: Install dependencies
        run: npm ci
      
      - name: Generate Prisma Client
        run: npx prisma generate
    
      - name: Deploy to Vercel
        run: |
          # Check if Vercel CLI is installed, if not install it
          if ! command -v vercel &> /dev/null; then
            npm install -g vercel
          fi
          
          # Check if Vercel token is available
          if [ -n "$VERCEL_TOKEN" ]; then
            echo "‚úÖ Vercel token is configured"
            vercel --token "$VERCEL_TOKEN" --prod --yes
          else
            echo "‚ö†Ô∏è Vercel deployment token not configured"
            echo ""
            echo "üöÄ BUILD SUCCESSFUL, but automatic deployment skipped! üéâ"
            echo ""
            echo "To enable automatic deployment, add this secret to your GitHub repository:"
            echo "1. Go to: Settings ‚Üí Secrets and variables ‚Üí Actions"
            echo "2. Add the following repository secret:"
            echo "   - VERCEL_TOKEN: Your Vercel API token"
            echo ""
            echo "3. Also make sure these environment variables are set in Vercel:"
            echo "   - DATABASE_URL: Your production database URL"
            echo "   - NEXTAUTH_SECRET: A secure random string (32+ characters)"
            echo "   - NEXTAUTH_URL: Your production URL"
            echo "   - NEXT_PUBLIC_SITE_URL: Same as NEXTAUTH_URL"
            echo ""
            echo "üìñ For detailed setup instructions, see: https://vercel.com/docs/concepts/git/vercel-for-github"
          fi
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
