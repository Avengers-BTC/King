import { NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';

export const dynamic = 'force-dynamic';

export async function GET() {
  try {
    const djs = await prisma.dJ.findMany({
      include: {
        user: {
          select: {
            name: true,
            image: true,
            username: true,
            location: true
          }
        },
        events: {
          where: {
            date: {
              gte: new Date()
            }
          },
          orderBy: {
            date: 'asc'
          },
          take: 3,
          include: {
            club: {
              select: {
                name: true,
                location: true
              }
            }
          }
        }
      },
      orderBy: {
        rating: 'desc'
      }
    });

    return NextResponse.json(djs);
  } catch (error) {
    console.error('Error fetching DJs:', error);
    return NextResponse.json(
      { error: 'Failed to fetch DJs' },
      { status: 500 }
    );
  }
}

export async function POST(request: Request) {
  try {
    const body = await request.json();
    const { 
      userId, 
      djName, 
      genre, 
      bio, 
      instagram, 
      twitter, 
      facebook, 
      currentClub 
    } = body;

    console.log('DJ Profile creation request:', { userId, genre, bio, djName });

    if (!userId || !genre || !bio) {
      console.log('Missing required fields:', { 
        userId: !!userId, 
        genre: !!genre, 
        bio: !!bio 
      });
      return NextResponse.json(
        { error: 'Missing required fields: userId, genre, and bio are required' },
        { status: 400 }
      );
    }

    // Convert genre to array if it's a single string
    const genres = Array.isArray(genre) ? genre : [genre];

    // Check if user already has a DJ profile
    const existingDJ = await prisma.dJ.findUnique({
      where: { userId }
    });

    if (existingDJ) {
      return NextResponse.json(
        { error: 'DJ profile already exists for this user' },
        { status: 400 }
      );
    }

    // Create DJ profile
    const dj = await prisma.dJ.create({
      data: {
        userId,
        genres: genres,
        bio,
        status: 'OFFLINE',
        currentClub: currentClub || null,
        instagram: instagram || null,
        twitter: twitter || null,
        facebook: facebook || null
      },
      include: {
        user: {
          select: {
            name: true,
            email: true,
            username: true,
            location: true,
            image: true
          }
        }
      }
    });

    return NextResponse.json(dj);
  } catch (error) {
    console.error('Error creating DJ profile:', error);
    return NextResponse.json(
      { error: 'Failed to create DJ profile' },
      { status: 500 }
    );
  }
}
